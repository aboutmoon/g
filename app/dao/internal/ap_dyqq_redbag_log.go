// ==========================================================================
// Code generated by GoFrame CLI tool. DO NOT EDIT.
// ==========================================================================

package internal

import (
	"context"
	"github.com/gogf/gf/database/gdb"
	"github.com/gogf/gf/frame/g"
)

// ApDyqqRedbagLogDao is the manager for logic model data accessing and custom defined data operations functions management.
type ApDyqqRedbagLogDao struct {
	Table   string                 // Table is the underlying table name of the DAO.
	Group   string                 // Group is the database configuration group name of current DAO.
	Columns ApDyqqRedbagLogColumns // Columns is the short type for Columns, which contains all the column names of Table for convenient usage.
}

// ApDyqqRedbagLogColumns defines and stores column names for table ap_dyqq_redbag_log.
type ApDyqqRedbagLogColumns struct {
	Id         string // 主键
	Uid        string // uid
	Nums       string // 红包数量
	Type       string // 奖励类型：0：红包币；1：音符币
	Source     string // 红包来源
	IsOnebyone string // 红包领取序号
	CreateAt   string // 创建时间
	IsDeleted  string // 是否删除；0:未删除；1:删除
	UpdateTime string // 更新时间
	CreateTime string // 插入时间
}

//  apDyqqRedbagLogColumns holds the columns for table ap_dyqq_redbag_log.
var apDyqqRedbagLogColumns = ApDyqqRedbagLogColumns{
	Id:         "id",
	Uid:        "uid",
	Nums:       "nums",
	Type:       "type",
	Source:     "source",
	IsOnebyone: "is_onebyone",
	CreateAt:   "create_at",
	IsDeleted:  "is_deleted",
	UpdateTime: "update_time",
	CreateTime: "create_time",
}

// NewApDyqqRedbagLogDao creates and returns a new DAO object for table data access.
func NewApDyqqRedbagLogDao() *ApDyqqRedbagLogDao {
	return &ApDyqqRedbagLogDao{
		Group:   "default",
		Table:   "ap_dyqq_redbag_log",
		Columns: apDyqqRedbagLogColumns,
	}
}

// DB retrieves and returns the underlying raw database management object of current DAO.
func (dao *ApDyqqRedbagLogDao) DB() gdb.DB {
	return g.DB(dao.Group)
}

// Ctx creates and returns the Model for current DAO, It automatically sets the context for current operation.
func (dao *ApDyqqRedbagLogDao) Ctx(ctx context.Context) *gdb.Model {
	return dao.DB().Model(dao.Table).Safe().Ctx(ctx)
}

// Transaction wraps the transaction logic using function f.
// It rollbacks the transaction and returns the error from function f if it returns non-nil error.
// It commits the transaction and returns nil if function f returns nil.
//
// Note that, you should not Commit or Rollback the transaction in function f
// as it is automatically handled by this function.
func (dao *ApDyqqRedbagLogDao) Transaction(ctx context.Context, f func(ctx context.Context, tx *gdb.TX) error) (err error) {
	return dao.Ctx(ctx).Transaction(ctx, f)
}

// ==========================================================================
// Code generated by GoFrame CLI tool. DO NOT EDIT.
// ==========================================================================

package internal

import (
	"context"
	"github.com/gogf/gf/database/gdb"
	"github.com/gogf/gf/frame/g"
)

// TOperateDataDao is the manager for logic model data accessing and custom defined data operations functions management.
type TOperateDataDao struct {
	Table   string              // Table is the underlying table name of the DAO.
	Group   string              // Group is the database configuration group name of current DAO.
	Columns TOperateDataColumns // Columns is the short type for Columns, which contains all the column names of Table for convenient usage.
}

// TOperateDataColumns defines and stores column names for table t_operate_data.
type TOperateDataColumns struct {
}

//  tOperateDataColumns holds the columns for table t_operate_data.
var tOperateDataColumns = TOperateDataColumns{}

// NewTOperateDataDao creates and returns a new DAO object for table data access.
func NewTOperateDataDao() *TOperateDataDao {
	return &TOperateDataDao{
		Group:   "default",
		Table:   "t_operate_data",
		Columns: tOperateDataColumns,
	}
}

// DB retrieves and returns the underlying raw database management object of current DAO.
func (dao *TOperateDataDao) DB() gdb.DB {
	return g.DB(dao.Group)
}

// Ctx creates and returns the Model for current DAO, It automatically sets the context for current operation.
func (dao *TOperateDataDao) Ctx(ctx context.Context) *gdb.Model {
	return dao.DB().Model(dao.Table).Safe().Ctx(ctx)
}

// Transaction wraps the transaction logic using function f.
// It rollbacks the transaction and returns the error from function f if it returns non-nil error.
// It commits the transaction and returns nil if function f returns nil.
//
// Note that, you should not Commit or Rollback the transaction in function f
// as it is automatically handled by this function.
func (dao *TOperateDataDao) Transaction(ctx context.Context, f func(ctx context.Context, tx *gdb.TX) error) (err error) {
	return dao.Ctx(ctx).Transaction(ctx, f)
}

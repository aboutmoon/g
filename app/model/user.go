// ==========================================================================
// This is auto-generated by gf cli tool. Fill this file as you wish.
// ==========================================================================

package model

import (
	"g/app/model/internal"
	"github.com/gogf/gf/frame/g"
)

// User is the golang structure for table user.
type User internal.User

// 注册请求参数，用于前后端交互参数格式约定
type UserApiSignUpReq struct {
	Passport  string `v:"required|length:6,16#账号不能为空|账号长度应当在:min到:max之间"`
	Password  string `v:"required|length:6,16#请输入确认密码|密码长度应当在:min到:max之间"`
	Password2 string `v:"required|length:6,16|same:Password#密码不能为空|密码长度应当在:min到:max之间|两次密码输入不相等"`
	Nickname  string
}

// 登录请求参数，用于前后端交互参数格式约定
type UserApiSignInReq struct {
	Passport string `v:"required#账号不能为空"`
	Password string `v:"required#密码不能为空"`
}

// 账号唯一性检测请求参数，用于前后端交互参数格式约定
type UserApiCheckPassportReq struct {
	Passport string `v:"required#账号不能为空"`
}

// 昵称唯一性检测请求参数，用于前后端交互参数格式约定
type UserApiCheckNickNameReq struct {
	Nickname string `v:"required#昵称不能为空"`
}

// 注册输入参数
type UserServiceSignUpReq struct {
	Passport string
	Password string
	Nickname string
}

type UserLoginReq struct {
	Username string
	Password string
	Captcha  string
}

type Path struct {
	Children      []Path `json:"children"`
	ComponentPath string `json:"component_path"`
	CreateTime    string `json:"create_time"`
	FontFamily    string `json:"fontFamily"`
	Href          string `json:"href"`
	Icon          string `json:"icon"`
	Id            string `json:"id"`
	IsCheck       string `json:"isCheck"`
	IsDeleted     string `json:"is_deleted"`
	Pid           string `json:"pid"`
	RouteHref     string `json:"route_href"`
	RouteName     string `json:"route_name"`
	RoutePath     string `json:"route_path"`
	Sort          string `json:"sort"`
	Spread        string `json:"spread"`
	Status        string `json:"status"`
	SystemId      string `json:"system_id"`
	Title         string `json:"title"`
	UpdateTime    string `json:"update_time"`
}

type PermissionRequestRes struct {
	Code    int    `json:"code"`
	Message string `json:"msg"`
	Data    struct {
		Groups g.ArrayInt `json:"data.groups"`
		Menu   []Path     `json:"data.menu"`
	} `json:"data"`
	NodePermissions g.ArrayStr `json:"nodePermissions"`
	Platforms       string     `json:"platforms"`
	UserInfo        struct {
		Email    string `json:"userInfo.email"`
		Id       int    `json:"userInfo.id"`
		Mobile   string `json:"userInfo.mobile"`
		Password string `json:"userInfo.password"`
		RealName string `json:"userInfo.real_name"`
		Status   string `json:"userInfo.status"`
		UserIcon string `json:"userInfo.user_icon"`
		UserName string `json:"userInfo.user_name"`
	} `json:"userInfo"`
}

type Test struct {
	Code    int         `json:"code"`
	Message string      `json:"msg"`
	Data    interface{} `json:"data"`
}
